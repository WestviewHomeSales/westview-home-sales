name: Daily Website Update and Deploy

on:
  schedule:
    # Run daily at 1:00 AM UTC
    - cron: '0 1 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: bun install
        
      - name: Install server function dependencies
        run: |
          cd server/functions
          bun install
          
      - name: Update Current Listings
        run: |
          cd server/functions
          node update-current-listings.js
          
      - name: Update Sold Listings (Append Only)
        run: |
          cd server/functions
          node update-sold-listings.js
          
      - name: Generate Static Data
        run: node scripts/generate-static-data.js
        
      - name: Build Static Site
        run: bun run build
        
      - name: Deploy to FTP Server
        env:
          FTP_SERVER: ftp.westviewhomesales.com
          FTP_USERNAME: charles@westviewhomesales.com
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        run: |
          # Create deployment script with secrets
          cat > deploy-secure.js << 'EOF'
          const ftp = require('basic-ftp');
          const fs = require('fs');
          
          async function deployWebsite() {
            const client = new ftp.Client();
            client.ftp.verbose = false;
            
            try {
              console.log('Connecting to FTP server...');
              await client.access({
                host: process.env.FTP_SERVER,
                user: process.env.FTP_USERNAME,
                password: process.env.FTP_PASSWORD,
                secure: false,
              });
              console.log('✓ Connected successfully!');
              
              // Navigate to public_html directory
              console.log('Navigating to public_html directory...');
              await client.cd('public_html');
              console.log('✓ Changed to public_html directory');
              
              // Clear existing files
              console.log('Clearing existing files...');
              const list = await client.list();
              for (const file of list) {
                if (file.name !== '.' && file.name !== '..' && 
                    file.name !== 'cgi-bin' && file.name !== '.htaccess') {
                  try {
                    if (file.type === 1) { // directory
                      await client.removeDir(file.name);
                    } else {
                      await client.remove(file.name);
                    }
                    console.log(`Removed: ${file.name}`);
                  } catch (error) {
                    console.log(`Could not remove ${file.name}: ${error.message}`);
                  }
                }
              }
              
              // Upload new files from 'out' directory
              console.log('Uploading new files...');
              await client.uploadFromDir('out', '.');
              console.log('✓ Upload completed successfully!');
              
              // Verify upload
              const newList = await client.list();
              console.log(`✓ Deployment complete! ${newList.length} items in public_html`);
              
            } catch (error) {
              console.error('Deployment failed:', error);
              process.exit(1);
            } finally {
              client.close();
            }
          }
          
          deployWebsite();
          EOF
          
          # Run the deployment script
          node deploy-secure.js
          
      - name: Commit and push updated data files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/data/
          if ! git diff --staged --quiet; then
            git commit -m "Update property listings data - $(date '+%Y-%m-%d %H:%M:%S')"
            git push
          else
            echo "No changes to commit"
          fi